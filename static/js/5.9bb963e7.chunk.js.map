{"version":3,"sources":["resources/img/mjolnir.png","components/randomChar/RandomChar.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","components/errorBoundary/ErrorBoundary.js","resources/img/vision.png","components/charSearchForm/CharSearchForm.js","components/pages/MainPage.js","components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","services/MarvelService.js","hooks/http.hook.js"],"names":["View","char","name","description","thumbnail","homepage","wiki","imgStyle","className","src","alt","style","href","RandomChar","useState","setChar","useMarvelService","loading","error","getCharacter","clearError","useEffect","updateChar","timerId","setInterval","clearInterval","onCharloaded","id","Math","floor","random","then","errorMessage","ErrorMessage","spinner","Spinner","content","onClick","mjolnir","CharList","props","charList","setCharList","newItemLoading","setNewItemLoading","offset","setOffset","charEnded","setCharEnded","getAllCharacters","onRequest","initial","onCharListLoaded","newCharList","ended","length","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","items","arr","map","i","CSSTransition","timeout","classNames","tabIndex","ref","el","onCharSelected","onKeyPress","e","key","TransitionGroup","component","renderItems","disabled","Skeleton","comics","to","resourceURI","slice","CharInfo","charId","skeleton","ErrorBoundary","state","errorInfo","console","log","this","setState","children","Component","CharSearchForm","getCharacterByName","onCharLoaded","results","initialValues","charName","validationSchema","Yup","required","onSubmit","htmlFor","type","placeholder","MainPage","selectedChar","setSelectedChar","Helmet","decoration","img","display","width","height","objectFit","margin","setLoading","setError","request","useCallback","url","method","body","headers","fetch","response","ok","Error","status","json","data","message","useHttp","_apiBase","_apiKey","res","_transformCharacter","getAllComics","_transformComics","getComic","path","extension","urls","title","pageCount","language","textObjects","price","prices"],"mappings":"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","file":"static/js/5.9bb963e7.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";"," import { useState, useEffect } from 'react';\nimport Spinner from '../spinner/Spinner';\nimport useMarvelService from '../../services/MarvelService';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\n\n\nconst RandomChar = () => {\n\n    const [char, setChar] = useState({});   \n    const {loading, error, getCharacter, clearError} = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n        const timerId = setInterval(updateChar, 60000);\n\n        return () => {\n            clearInterval(timerId);\n        }\n    }, [])\n    \n    const onCharloaded = (char) => {\n        setChar(char);\n    }\n\n    const updateChar = () => {\n        clearError();\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\n        getCharacter(id)\n            .then(onCharloaded)\n    }\n\n        const errorMessage = error ? <ErrorMessage/> : null;\n        const spinner = loading ? <Spinner/> : null;\n        const content = !(loading || error || !char) ? <View char={char}/> : null;\n\n        return (\n            <div className=\"randomchar\">\n                {errorMessage}\n                {spinner}\n                {content}\n                <div className=\"randomchar__static\">\n                    <p className=\"randomchar__title\">\n                        Random character for today!<br/>\n                        Do you want to get to know him better?\n                    </p>\n                    <p className=\"randomchar__title\">\n                        Or choose another one\n                    </p>\n                    <button className=\"button button__main\" onClick={updateChar}>\n                        <div className=\"inner\">try it</div>\n                    </button>\n                    <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n                </div>\n            </div>\n        )\n    }\n\n\nconst View = ({char}) => {\n\n    const {name, description, thumbnail, homepage, wiki} = char;\n    let imgStyle = {'objectFit' : 'cover'};\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit' : 'contain'};\n    }\n\n    return (\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={imgStyle}/>\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">\n                    {description}\n                </p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default RandomChar;","import {useState, useEffect, useRef} from 'react';\nimport useMarvelService from '../../services/MarvelService';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport Spinner from '../spinner/Spinner';\nimport PropTypes from 'prop-types';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\nimport './charList.scss';\n\nconst CharList = (props) => {\n\n    const [charList, setCharList] = useState([]);\n    const [newItemLoading, setNewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(210);\n    const [charEnded, setCharEnded] = useState(false);\n\n    const {loading, error, getAllCharacters} = useMarvelService();\n\n    useEffect(() => { \n        onRequest(offset, true);\n    }, [])\n\n    const onRequest = (offset, initial) => {\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\n        getAllCharacters(offset)\n            .then(onCharListLoaded)\n    }\n\n    const onCharListLoaded = (newCharList) => {\n        let ended = false;\n        if(newCharList.length < 9) {\n            ended = true;\n        }\n\n        setCharList(charList => [...charList, ...newCharList]);\n        setNewItemLoading(newItemLoading => false);\n        setOffset(offset => offset + 9);\n        setCharEnded(charEnded => ended);\n    }\n\n    const itemRefs = useRef([]);\n\n    const focusOnItem = (id) => {\n        itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\n        itemRefs.current[id].classList.add('char__item_selected');\n        itemRefs.current[id].focus();\n    }\n\n    function renderItems(arr) {\n        const items = arr.map((item, i) => {\n            let imgStyle = {'objectFit' : 'cover'};\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n                imgStyle = {'objectFit' : 'unset'};\n            }\n\n            return (\n                <CSSTransition key={item.id} timeout={500} classNames=\"char__item\">\n                    <li className=\"char__item\" \n                        tabIndex={0}\n                        ref={el => itemRefs.current[i] = el}\n                        key={item.id} \n                        onClick={()=> {\n                            props.onCharSelected(item.id)\n                            focusOnItem(i)\n                        }}\n                        onKeyPress={(e) => {\n                            if(e.key === '' || e.key === \"Enter\") {\n                                props.onCharSelected(item.id);\n                                focusOnItem(i)\n                            }\n                        }}>\n                            <img src={item.thumbnail} alt={item.name} style={imgStyle}/>\n                            <div className=\"char__name\">{item.name}</div>\n                    </li>\n                </CSSTransition>\n            )\n        });\n        return (\n            <ul className=\"char__grid\">\n                <TransitionGroup component={null} className=\"char__grid\">\n                    {items}\n                </TransitionGroup>\n            </ul>\n        )\n    }\n\n    const items = renderItems(charList);\n\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading && !newItemLoading ? <Spinner/> : null;\n\n    return (\n        <div className=\"char__list\">\n            {errorMessage}\n            {spinner}\n            {items}\n            <button \n                className=\"button button__main button__long\"\n                disabled={newItemLoading}\n                style={{'display' : charEnded ? 'none' : 'block'}}\n                onClick={() => onRequest(offset)}>\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )    \n}\n\nCharList.propTypes = {\n    onCharSelected: PropTypes.func.isRequired\n}\n\n\nexport default CharList;","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport Skeleton from '../skeleton/Skeleton';\nimport PropTypes from 'prop-types';\nimport './charInfo.scss';\n\nconst CharInfo = (props) => {\n\n    const [char, setChar] = useState(null);\n\n    const {loading, error, getCharacter, clearError} = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n    // eslint-disable-next-line\n    }, [props.charId])\n\n    const updateChar = () => {\n        const {charId} = props;\n        if(!charId) {\n            return;\n        }\n        \n        clearError();\n        getCharacter(charId)\n            .then(onCharloaded)\n    }\n\n    const onCharloaded = (char) => {\n        setChar(char);\n    }\n\n        const skeleton = char || loading || error ? null : <Skeleton/>\n        const errorMessage = error ? <ErrorMessage/> : null;\n        const spinner = loading ? <Spinner/> : null;\n        const content = !(loading || error || !char) ? <View char={char}/> : null;\n\n        return (\n            <div className=\"char__info\">\n                {skeleton}\n                {errorMessage}\n                {spinner}\n                {content}\n            </div>\n        )\n    }\n\n\nconst View = ({char}) => {\n\n    const {name, description, thumbnail, homepage, wiki, comics} = char;\n    \n    let imgStyle = {'objectFit' : 'cover'};\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit' : 'contain'};\n    }\n\n    return (\n        <>\n            <div className=\"char__basics\">\n                <img src={thumbnail} alt={name} style={imgStyle}/>\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                        <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <a href={wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">\n                {description}\n            </div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n                {comics.length > 0 ? null : 'There is no comics with this character'}\n                {\n                    comics.map((item, i) => {\n                        // eslint-disable-next-line\n                        if (i > 9)  return;\n                        return (\n                            <li key={i} className=\"char__comics-item\">\n                                <Link to={`/comics/${item.resourceURI.slice(-5)}`}>\n                                    {item.name}\n                                </Link>\n                            </li>\n                        )\n                    })\n                }   \n            </ul>\n        </>\n    )\n}\n\nCharInfo.propTypes = {\n    charId: PropTypes.number\n}\n\nexport default CharInfo;","import { Component } from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n    state = {\r\n        error: false\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        console.log(error, errorInfo);\r\n        this.setState({\r\n            error: true\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.error) {\r\n            return <ErrorMessage/>\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import {useState} from 'react';\r\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport {Link} from 'react-router-dom';\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\nimport './charSearchForm.scss';\r\n\r\nconst CharSearchForm = () => {\r\n\r\n    const [char, setChar] = useState(null);\r\n    const {loading, error, getCharacterByName, clearError} = useMarvelService();\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n    const updateChar = (name) => {\r\n        clearError();\r\n\r\n        getCharacterByName(name)\r\n            .then(onCharLoaded);\r\n    }\r\n\r\n    const errorMessage = error ? <div className=\"char__search-critical-error\"><ErrorMessage /></div> : null;\r\n    const results = !char ? null : char.length > 0 ? \r\n                    <div className=\"char__search-wrapper\">\r\n                        <div className=\"char__search-success\">There is! Visit {char[0].name} page?</div>\r\n                        <Link to={`/characters/${char[0].id}`} className=\"button button__secondary\">\r\n                            <div className=\"inner\">To page</div>\r\n                        </Link>\r\n                    </div> :\r\n                    <div className=\"char__search-error\">\r\n                        The character was not found. Check the name and try again\r\n                    </div>;\r\n\r\n\r\n    return(\r\n        <div className=\"char__search-form\">\r\n            <Formik\r\n                initialValues={{\r\n                    charName: ''\r\n                }}\r\n                validationSchema={Yup.object({\r\n                    charName: Yup.string().required('This field is required')\r\n                })}\r\n                onSubmit={({charName}) => {\r\n                    updateChar(charName)\r\n                }}\r\n            >\r\n                <Form>\r\n                    <label className=\"char__search-label\" htmlFor=\"charName\">Or find a character by name:</label>\r\n                    <div className=\"char__search-wrapper\">\r\n                        <Field\r\n                            id=\"charName\"\r\n                            name=\"charName\"\r\n                            type=\"text\"\r\n                            placeholder=\"Enter name\"\r\n                        />\r\n                        <button\r\n                            type=\"submit\"\r\n                            className=\"button button__main\"\r\n                            disabled={loading}>\r\n                            <div className=\"inner\">find</div>\r\n                        </button>\r\n                    </div>\r\n                    <FormikErrorMessage component=\"div\" className=\"char__search-error\" name=\"charName\" />\r\n                </Form>\r\n            </Formik>\r\n            {results}\r\n            {errorMessage}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CharSearchForm;","import { useState } from 'react';\r\nimport { Helmet } from 'react-helmet';\r\n\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport ErrorBoundary from '../errorBoundary/ErrorBoundary';\r\nimport decoration from '../../resources/img/vision.png';\r\nimport CharSearchForm from '../charSearchForm/CharSearchForm';\r\n\r\nconst MainPage = () => {\r\n\r\n    const [selectedChar, setSelectedChar] = useState(null)\r\n    \r\n    const onCharSelected = (id) => {\r\n        setSelectedChar(id)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <meta\r\n                    name=\"description\"\r\n                    content=\"Marvel information portal\"\r\n                />\r\n                <title>Marvel information portal</title>\r\n            </Helmet>\r\n            <ErrorBoundary>\r\n                <RandomChar/>\r\n            </ErrorBoundary>\r\n            <div className=\"char__content\">\r\n                <ErrorBoundary>\r\n                    <CharList onCharSelected={onCharSelected}/>\r\n                </ErrorBoundary>\r\n                <div>\r\n                    <ErrorBoundary>\r\n                        <CharInfo charId={selectedChar}/>\r\n                    </ErrorBoundary>   \r\n                    <ErrorBoundary>\r\n                        <CharSearchForm/>\r\n                    </ErrorBoundary>\r\n                </div>\r\n            </div>\r\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MainPage;","export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from './error.gif'\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img src={img} alt=\"Error\" style={{display: 'block', width: '250px', height: '250px', objectFit: 'contain', margin: '0 auto'}} />\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import { useHttp } from \"../hooks/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n    const {loading, request, error, clearError} = useHttp();\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'apikey=2237c04bac4b813ebf6c1cb1ee2c41d9';\r\n    const _baseOffset = 210;\r\n\r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter) //при такой записи вызова функции аргумент будет подставляться автоматически\r\n    }\r\n\r\n    const getCharacterByName = async (name) => {\r\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    const getAllComics = async (offset = 0) => {\r\n        const res = await request(`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformComics);\r\n    }\r\n\r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n        return _transformComics(res.data.results[0]);\r\n    }\r\n\r\n    const _transformCharacter = (char) => {\r\n        return {\r\n            name: char.name,\r\n            description: char.description ? `${char.description.slice(0, 210)}...` : `There is no description for this character`,\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            id: char.id,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n\r\n    const _transformComics = (comics) => {\r\n        return {\r\n            id: comics.id,\r\n            title: comics.title,\r\n            description: comics.description || 'There is no description',\r\n            pageCount: comics.pageCount ? `${comics.pageCount} p.` : 'No information about the number of pages',\r\n            thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n            language: comics.textObjects.language || 'en-us',\r\n            price: comics.prices.price ? `${comics.prices.price}$` : 'not available'\r\n        }\r\n    }\r\n\r\n    return {loading, error, clearError, getAllCharacters, getCharacterByName, getCharacter, getAllComics, getComic}\r\n}\r\n\r\nexport default useMarvelService;","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\r\n\r\n        setLoading(true);\r\n\r\n        try {\r\n            const response = await fetch(url, {method, body, headers});\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n\r\n            setLoading(false);\r\n            return data;\r\n        } catch(e) {\r\n            setLoading(false);\r\n            setError(e.message);\r\n            throw e;\r\n        }\r\n    }, []);\r\n\r\n    const clearError = useCallback(() => setError(null), []);\r\n\r\n    return {loading, request, error, clearError}\r\n}"],"sourceRoot":""}